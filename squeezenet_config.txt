imds = imageDatastore('C:\Users\soymarwin\Desktop\results\squeezenet\earset\earset','IncludeSubfolders',true,'LabelSource','foldernames');


[imdsTrain,imdsValidation] = splitEachLabel(imds,0.8,'randomized');

%net = squeezenet;

%numClasses = numel(categories(imdsTrain.Labels));
%lgraph = layerGraph(net);

%newCVLayer = convolution2dLayer(numClasses,10,'Name','new_cv','WeightLearnRateFactor',20,'BiasLearnRateFactor',20);
%lgraph = replaceLayer(lgraph,'conv10',newCVLayer);

%newReluLayer = reluLayer('Name','new_rl');
%lgraph = replaceLayer(lgraph,'relu_conv10',newReluLayer);

%newPooling = averagePooling2dLayer('Name','newPool');
%lgraph = replaceLayer(lgraph,'pool10',newPooling);

%newFCLayer = fullyConnectedLayer(numClasses,'Name','new_fc','WeightLearnRateFactor',20,'BiasLearnRateFactor',20);
%lgraph = addLayers(lgraph,newFCLayer);

%newSoftmaxLayer = softmaxLayer('Name','prob2');
%lgraph = replaceLayer(lgraph,'prob',newSoftmaxLayer);

%newClassLayer = classificationLayer('Name','new_classoutput');
%lgraph = replaceLayer(lgraph,'ClassificationLayer_predictions',newClassLayer);

pixelRange = [-30 30];

inputSize = net.Layers(1).InputSize;

imageAugmenter = imageDataAugmenter('RandXReflection',true,'RandXTranslation',pixelRange,'RandYTranslation',pixelRange);

augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain,'DataAugmentation',imageAugmenter);

augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsValidation);

options = trainingOptions('adam','MiniBatchSize',5,'MaxEpochs',30,'InitialLearnRate',1e-5,'Shuffle','every-epoch','ValidationData',augimdsValidation,'ValidationFrequency',10,'Verbose',false,'Plots','training-progress','LearnRateSchedule','piecewise');

netTransfer = trainNetwork(augimdsTrain,lgraph_1,options);